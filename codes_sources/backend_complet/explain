
Le fichier `connect.py` est un **syst√®me complet de backend intelligent** pour traiter trois grands types de requ√™tes en langage naturel, √† savoir :

---

### ‚úÖ **1. Pr√©diction des demandes par technologie et r√©gion**

Fonction principale : `part_1_prediction(question)`

üîç **√âtapes** :

* Charge un CSV contenant les volumes de demande (`count_fibre`, `count_4g`, etc.) par jour et par r√©gion.
* Analyse la question en fran√ßais (ex: "pr√©dis le fixe √† Tunis pendant 7 jours avec Moirai") :

  * ‚û§ Extrait la technologie (`fixe`, `fibre`, etc.)
  * ‚û§ Extrait la dur√©e (ex: `7 jours`)
  * ‚û§ Extrait le mod√®le demand√© (`TimeGPT`, `TimesFM`, `Moirai`)
  * ‚û§ D√©tecte si la zone mentionn√©e est une d√©l√©gation ou un gouvernorat.
* Pr√©pare la s√©rie temporelle `y` (variable cible) et la colonne `ds` (dates).
* Utilise le mod√®le s√©lectionn√© pour faire la pr√©vision :

  * **TimeGPT** via `nixtla_client.forecast(...)`
  * **TimesFM** avec la classe `TimesFm`
  * **Moirai** avec GluonTS
* Sauvegarde les pr√©visions dans un CSV, et les ins√®re dans PostgreSQL.
* G√©n√®re un r√©sum√© avec **BART** (mod√®le de texte de Facebook/Meta).
* Retourne un texte lisible avec les pr√©visions et un r√©sum√© intelligent.

---

### ‚úÖ **2. Pr√©diction des ventes et d√©tection de saturation des sites**

Fonction principale : `part_2_ventes_saturation(question)`

üîç **√âtapes** :

* Charge 3 fichiers CSV :

  * Ventes par site (fixe JDID)
  * Potentiel maximum de chaque site
  * Ventes par r√©gion et technologie
* Analyse la question pour extraire :

  * Le nom du **site** (ex : "BAR1001")
  * La technologie (ex : "fibre")
  * Le mod√®le demand√©
  * La p√©riode
  * La zone ou le gouvernorat
* Deux cas :

  * ‚úÖ **Pr√©diction des ventes** sur un site ou une zone.
  * ‚úÖ **Calcul de la date de saturation** si le site est mentionn√©.
* Pour la saturation :

  * Calcule le cumul des ventes actuelles.
  * Si ce cumul < potentiel :

    * G√©n√®re des pr√©visions par blocs de 30 jours jusqu‚Äô√† d√©passer le potentiel ou la limite de 1000 jours.
  * Retourne la date estim√©e de saturation.

---

### ‚úÖ **3. V√©rification d‚Äô√©ligibilit√© aux technologies par carte**

Fonction principale : `part_3_eligibilite(question=None)`

üó∫Ô∏è **Fonctionnalit√©** :

* G√©n√®re une carte interactive (avec `folium`) contenant :

  * Les polygones de couverture issus de shapefiles (`shp`)
  * Les positions des sites 5G
* L‚Äôutilisateur peut **cliquer sur une position**, et le syst√®me affiche :

  * ‚û§ Les technologies disponibles √† cet endroit
  * ‚û§ Le site 5G le plus proche avec la distance

---

### üîÑ **Pipeline de traitement automatique de la question**

Fonction : `handle_question(question)`

üîß Fonctionnement :

* Analyse le type de question :

  * `prediction` ‚Üí appel √† `part_1_prediction()`
  * `ventes_saturation` ‚Üí appel √† `part_2_ventes_saturation()`
  * `eligibilite` ‚Üí appel √† `part_3_eligibilite()`

---

### üß† **Technologies & Mod√®les utilis√©s**

* **NLP** : spaCy (pour l‚Äôextraction d‚Äôentit√©s et de mots cl√©s)
* **G√©n√©ration de texte** : BART (`facebook/bart-base`)
* **S√©ries temporelles** :

  * `TimeGPT` (API Nixtla)
  * `TimesFM` (mod√®le de Google)
  * `Moirai` (de Salesforce)
* **Cartographie** : `folium`, `geopandas`
* **Base de donn√©es** : PostgreSQL (`psycopg2`) pour stocker les pr√©dictions
* **CSV** : Sauvegarde locale de toutes les pr√©visions

---

### üìå Exemple de question trait√©e

```plaintext
"Pr√©dis les ventes de fibre √† Sfax pendant 7 jours avec Moirai"
```

‚û°Ô∏è D√©tecte :

* Type : pr√©vision de ventes
* Technologie : fibre
* R√©gion : Sfax
* Mod√®le : Moirai
* Dur√©e : 7 jours

‚û°Ô∏è Retourne :

* Une pr√©vision chiffr√©e jour par jour
* Un r√©sum√© BART en langage naturel
* Un fichier CSV enregistr√©
* Insertion dans PostgreSQL

---

