import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Charger les données
df = pd.read_csv("/content/df_counts_preprocessing.csv")
df['jour'] = pd.to_datetime(df['jour'])  # Adapter si nécessaire

# Liste des colonnes cibles
target_columns = ['count_fixe_jdid', 'count_4g', 'count_5g_box', 'count_fibre']

# Fonction pour créer des séquences
def create_dataset(series, time_step=7):
    X, y = [], []
    for i in range(len(series) - time_step):
        X.append(series[i:i + time_step])
        y.append(series[i + time_step])
    return np.array(X), np.array(y)

# Boucle sur chaque colonne cible
for target in target_columns:
    print(f"\n=== Prévision pour {target} ===")
    data = df[target].values.reshape(-1, 1)

    # Normalisation
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(data)

    # Création des séquences
    time_step = 7
    X, y = create_dataset(data_scaled, time_step)
    X = X.reshape(X.shape[0], X.shape[1], 1)

    # Split train/test
    train_size = int(len(X) * 0.8)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]

    # Modèle LSTM
    model = Sequential()
    model.add(LSTM(50, return_sequences=False, input_shape=(X_train.shape[1], 1)))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')
    model.fit(X_train, y_train, epochs=10, batch_size=16, verbose=0)

    # Prédiction
    y_pred = model.predict(X_test)
    y_pred_inv = scaler.inverse_transform(y_pred)
    y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1))

    # Évaluation
    mae = mean_absolute_error(y_test_inv, y_pred_inv)
    mse = mean_squared_error(y_test_inv, y_pred_inv)
    r2 = r2_score(y_test_inv, y_pred_inv)

    print(f"MAE: {mae:.4f}")
    print(f"MSE: {mse:.4f}")
    print(f"R²: {r2:.4f}")

    # Affichage
    plt.figure(figsize=(10, 5))
    plt.plot(y_test_inv, label='Réel', color='blue')
    plt.plot(y_pred_inv, label='Prévu', color='red', linestyle='dashed')
    plt.title(f'LSTM: Réel vs Prévu pour {target}')
    plt.xlabel('Temps')
    plt.ylabel('Valeur')
    plt.legend()
    plt.show()
